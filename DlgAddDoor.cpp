// -*- C++ -*- generated by wxGlade 0.3.1 on Mon Oct 20 12:00:39 2003

#include "DlgAddDoor.h"

#include "kazam.h"
extern MainFrame *frame;

BEGIN_EVENT_TABLE(DlgAddDoor, wxDialog)
EVT_BUTTON(BUTTON_NEWKEY, DlgAddDoor::OnNewKey)
EVT_BUTTON(BUTTON_NEWDOOR, DlgAddDoor::OnNewDoor)
EVT_BUTTON(wxID_OK, DlgAddDoor::OnOK)
END_EVENT_TABLE()

extern wxString informKeyword[];

void DlgAddDoor::SetValue(const wxString& from, const wxString& to, int _fromDir, int _toDir)
{
  toDir=_toDir;
  fromDir=_fromDir;
  labelTo->SetLabel(to);
  labelFrom->SetLabel(from);
  FillKeyCombo(comboKey, "");
  FillDoorCombo(comboDoor, "");
}

void DlgAddDoor::FillDoorCombo(wxComboBox *combo, const wxString& showID)
{
  combo->Clear();
  combo->Append("<none>");

  for(unsigned int i=0; i<frame->project.objects.GetCount(); i++) {
    InformData *current=&frame->project.objects[i];
    if(current->type!=INF_T_ITEM) continue;
    if(current->GetSource(INF_A_DOOR).IsEmpty()) continue;
    combo->Append(current->GetSource(INF_ID));
  }

  if(showID.IsEmpty()) {
    combo->SetValue("<none>");
  } else {
    combo->SetValue(showID);
  }
}

void DlgAddDoor::FillKeyCombo(wxComboBox *combo, const wxString& showID)
{
  combo->Clear();
  combo->Append("<none>");

  for(unsigned int i=0; i<frame->project.objects.GetCount(); i++) {
    InformData *current=&frame->project.objects[i];
    if(current->type!=INF_T_ITEM) continue;
    if(!current->GetSource(INF_A_SCENERY).IsEmpty()) continue;
    if(!current->GetSource(INF_A_DOOR).IsEmpty()) continue;
    combo->Append(current->GetSource(INF_ID));
  }

  if(showID.IsEmpty()) {
    combo->SetValue("<none>");
  } else {
    combo->SetValue(showID);
  }
}

void DlgAddDoor::OnNewKey(wxCommandEvent& WXUNUSED(event))
{
  wxTextEntryDialog dlg(this, "Enter the object ID");
  do {
    if(dlg.ShowModal()==wxID_CANCEL) return;
  } while(!frame->project.IsUniqueID(dlg.GetValue(), frame));

  frame->project.AddObject(dlg.GetValue(), INF_T_ITEM, false);
  FillKeyCombo(comboKey, dlg.GetValue());
}

void DlgAddDoor::OnNewDoor(wxCommandEvent& WXUNUSED(event))
{
  wxTextEntryDialog dlg(this, "Enter the object ID");
  do {
    if(dlg.ShowModal()==wxID_CANCEL) return;
  } while(!frame->project.IsUniqueID(dlg.GetValue(), frame));

  InformData *o=frame->project.AddObject(dlg.GetValue(), INF_T_ITEM, false);
  o->Update();
  o->SetSource(INF_A_DOOR, "door");

  wxString doorTo="[;\n";
  doorTo=doorTo+frame->project.indent+frame->project.indent+frame->project.indent;
  doorTo=doorTo+"if(location=="+labelTo->GetLabel()+") return "+labelFrom->GetLabel()+";\n";
  doorTo=doorTo+frame->project.indent+frame->project.indent+frame->project.indent;
  doorTo=doorTo+"return "+labelTo->GetLabel()+";\n";
  doorTo=doorTo+frame->project.indent+frame->project.indent+"]";
  o->SetSource(INF_DOORTO, doorTo);

  wxString doorDir="[;\n";
  doorDir=doorDir+frame->project.indent+frame->project.indent+frame->project.indent;
  doorDir=doorDir+"if(location=="+labelTo->GetLabel()+") return "+informKeyword[toDir+INF_DIR_N]+";\n";
  doorDir=doorDir+frame->project.indent+frame->project.indent+frame->project.indent;
  doorDir=doorDir+"return "+informKeyword[fromDir+INF_DIR_N]+";\n";
  doorDir=doorDir+frame->project.indent+frame->project.indent+"]";
  o->SetSource(INF_DOORDIR, doorDir);

  o->Update();
  FillDoorCombo(comboDoor, dlg.GetValue());
}

ObjectData *DlgAddDoor::GetValue()
{
  // Creating the door object
  ObjectData *door=(ObjectData *) frame->project.FindObject(comboDoor->GetValue());

  door->SetSource(INF_FOUNDIN, labelTo->GetLabel()+" "+labelFrom->GetLabel());
  if(checkboxOpenable->GetValue()) door->SetSource(INF_A_OPENABLE, "openable"); else door->SetSource(INF_A_OPENABLE, "");
  if(checkboxOpen->GetValue()) door->SetSource(INF_A_OPEN, "open"); else door->SetSource(INF_A_OPEN, "");
  if(checkboxLockable->GetValue()) door->SetSource(INF_A_LOCKABLE, "lockable"); else door->SetSource(INF_A_LOCKABLE, "");
  if(checkboxLocked->GetValue()) door->SetSource(INF_A_LOCKED, "locked"); else door->SetSource(INF_A_LOCKED, "");

  wxString key=comboKey->GetValue();
  if(key.IsSameAs("<none>")) key="";
  door->SetSource(INF_WITHKEY, key);
  door->Update();

  return door;
}

void DlgAddDoor::OnOK(wxCommandEvent& event)
{
  if(comboDoor->GetValue().IsSameAs("<none>")) {
    wxLogError("You must supply a door ID");
    return;
  }
  event.Skip();
}

DlgAddDoor::DlgAddDoor(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxCAPTION|wxRESIZE_BORDER|wxSYSTEM_MENU|wxTHICK_FRAME)
{
    // begin wxGlade: DlgAddDoor::DlgAddDoor
    label_1 = new wxStaticText(this, -1, wxT("ID"));
    const wxString comboDoor_choices[] = {
        wxT("choice 1")
    };
    comboDoor = new InformComboBox(this, -1, "", wxDefaultPosition, wxDefaultSize, 1, comboDoor_choices, wxCB_DROPDOWN|wxCB_READONLY|wxCB_SORT);
    buttonNewDoor = new wxButton(this, BUTTON_NEWDOOR, wxT("New Door..."));
    label_2 = new wxStaticText(this, -1, wxT("From"));
    labelFrom = new wxStaticText(this, -1, wxT("labelFrom"));
    label_3 = new wxStaticText(this, -1, wxT("To"));
    labelTo = new wxStaticText(this, -1, wxT("labelTo"));
    label_4 = new wxStaticText(this, -1, wxT("Status"));
    checkboxOpenable = new wxCheckBox(this, -1, wxT("Openable"));
    checkboxOpen = new wxCheckBox(this, -1, wxT("Open"));
    label_5 = new wxStaticText(this, -1, wxT("State"));
    checkboxLockable = new wxCheckBox(this, -1, wxT("Lockable"));
    checkboxLocked = new wxCheckBox(this, -1, wxT("Locked"));
    label_6 = new wxStaticText(this, -1, wxT("Key"));
    const wxString comboKey_choices[] = {
        wxT("choice 1")
    };
    comboKey = new InformComboBox(this, -1, "", wxDefaultPosition, wxDefaultSize, 1, comboKey_choices, wxCB_DROPDOWN|wxCB_READONLY|wxCB_SORT);
    buttonNewKey = new wxButton(this, BUTTON_NEWKEY, wxT("New Key..."));
    buttonOK = new wxButton(this, wxID_OK, wxT("OK"));
    buttonCancel = new wxButton(this, wxID_CANCEL, wxT("Cancel"));

    set_properties();
    do_layout();
    // end wxGlade
}

void DlgAddDoor::set_properties()
{
    // begin wxGlade: DlgAddDoor::set_properties
    SetTitle(wxT("Add Door"));
    SetSize(wxSize(386, 206));
    comboDoor->SetSelection(0);
    checkboxOpenable->SetValue(1);
    comboKey->SetSelection(0);
    // end wxGlade
}


void DlgAddDoor::do_layout()
{
    // begin wxGlade: DlgAddDoor::do_layout
    wxFlexGridSizer* sizer_1 = new wxFlexGridSizer(2, 1, 0, 0);
    wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_2 = new wxFlexGridSizer(6, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_6 = new wxFlexGridSizer(1, 2, 0, 0);
    wxGridSizer* grid_sizer_5 = new wxGridSizer(1, 2, 0, 0);
    wxGridSizer* grid_sizer_4 = new wxGridSizer(1, 2, 0, 0);
    wxFlexGridSizer* grid_sizer_3 = new wxFlexGridSizer(1, 2, 0, 0);
    grid_sizer_2->Add(label_1, 0, 0, 0);
    grid_sizer_3->Add(comboDoor, 0, wxEXPAND, 0);
    grid_sizer_3->Add(buttonNewDoor, 0, 0, 0);
    grid_sizer_3->AddGrowableCol(0);
    grid_sizer_2->Add(grid_sizer_3, 1, wxEXPAND, 0);
    grid_sizer_2->Add(label_2, 0, 0, 0);
    grid_sizer_2->Add(labelFrom, 0, wxEXPAND, 0);
    grid_sizer_2->Add(label_3, 0, 0, 0);
    grid_sizer_2->Add(labelTo, 0, wxEXPAND, 0);
    grid_sizer_2->Add(label_4, 0, 0, 0);
    grid_sizer_4->Add(checkboxOpenable, 0, 0, 0);
    grid_sizer_4->Add(checkboxOpen, 0, 0, 0);
    grid_sizer_2->Add(grid_sizer_4, 1, wxEXPAND, 0);
    grid_sizer_2->Add(label_5, 0, 0, 0);
    grid_sizer_5->Add(checkboxLockable, 0, 0, 0);
    grid_sizer_5->Add(checkboxLocked, 0, 0, 0);
    grid_sizer_2->Add(grid_sizer_5, 1, wxEXPAND, 0);
    grid_sizer_2->Add(label_6, 0, 0, 0);
    grid_sizer_6->Add(comboKey, 0, wxEXPAND, 0);
    grid_sizer_6->Add(buttonNewKey, 0, 0, 0);
    grid_sizer_6->AddGrowableCol(0);
    grid_sizer_2->Add(grid_sizer_6, 1, wxEXPAND, 0);
    grid_sizer_2->AddGrowableCol(1);
    sizer_1->Add(grid_sizer_2, 1, wxEXPAND, 0);
    grid_sizer_1->Add(buttonOK, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    grid_sizer_1->Add(buttonCancel, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    grid_sizer_1->AddGrowableCol(0);
    grid_sizer_1->AddGrowableCol(1);
    sizer_1->Add(grid_sizer_1, 1, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(sizer_1);
    sizer_1->AddGrowableRow(0);
    sizer_1->AddGrowableCol(0);
    Layout();
    // end wxGlade
}

